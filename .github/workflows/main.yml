name: Translation Pipeline

on: push

jobs:
  translation-process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Generate and commit translations
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 1. Generate JSON
          echo "Running conversion script..."
          node cypress/fixtures/convertExcel.js
      
          # 2. Verify output
          echo "Generated files:"
          ls -la cypress/fixtures/
      
          if [ ! -f "cypress/fixtures/translations.json" ]; then
            echo "::error::Failed to generate full_translation.json"
            exit 1
          fi
      
          # 3. Commit changes (only if file content actually changed)
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
          git add -u cypress/fixtures/translations.json   # stage if already tracked
          git add cypress/fixtures/translations.json      # stage if new/untracked
      
          # Check if there are staged changes before committing
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Auto-generated translation JSON [skip ci]"
            git push
          fi

      - name: Process language code
        id: language
        run: |
          TRIGGER_MSG="${{ github.event.head_commit.message }}"
          echo "Analyzing triggering commit: $TRIGGER_MSG"
            
          # Accept both [xx] and [xx-xx] formats
          LANGUAGE_CODE=$(echo "$TRIGGER_MSG" | grep -oE '\[([a-z]{2})(-[a-z]{2})?\]' | head -1 | tr -d '[]')
            
          # Validate at least 2-letter code exists
          if [[ ! $LANGUAGE_CODE =~ ^[a-z]{2}(-[a-z]{2})?$ ]]; then
            echo "::error::Commit message must contain [lang-code] (e.g., [tr] or [pt-br])"
            echo "Triggering commit was: $TRIGGER_MSG"
            exit 1
          fi
            
          echo "Using language code: $LANGUAGE_CODE"
          echo "language_code=$LANGUAGE_CODE" >> $GITHUB_OUTPUT

      - name: Rename test file
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 1. Find the existing translation file (matches any language code)
          OLD_FILE=$(find cypress/e2e -name 'translation_*.cy.js' | head -n 1)
            
          if [ -z "$OLD_FILE" ]; then
            echo "::error::No translation test file found in cypress/e2e/"
            ls -la cypress/e2e/
            exit 1
          fi
            
          # 2. Set new filename with extracted language code
          NEW_FILE="cypress/e2e/translation_${{ steps.language.outputs.language_code }}.cy.js"
          echo "Renaming $OLD_FILE to $NEW_FILE"
            
          # 3. Perform the rename
          mv -f "$OLD_FILE" "$NEW_FILE"
            
          # 4. Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
            
          # 5. Stage changes (handles both rename and new file cases)
          git add "$OLD_FILE" "$NEW_FILE"
            
          # 6. Commit and push
          git commit -m "Renamed translation file to ${{ steps.language.outputs.language_code }} [skip ci]"
          git pull --rebase origin master
          git push "https://$GH_TOKEN@github.com/$GITHUB_REPOSITORY.git" HEAD:master

      - name: Run translation tests
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          headless: true
          spec: "cypress/e2e/translation_${{ steps.language.outputs.language_code }}.cy.js"

      - name: Generate HTML report
        if: always()
        run: |
          # 1. Ensure report directory exists
          mkdir -p cypress/reports/html
            
          # 2. Generate merged report
          npx mochawesome-merge cypress/reports/mocha/*.json > merged-report.json
            
          # 3. Generate HTML report with explicit output path
          npx marge merged-report.json \
            --reportDir cypress/reports/html \
            --reportFilename index.html
            
          # 4. Verify report creation
          ls -la cypress/reports/html/
        
      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: translation-report-${{ steps.language.outputs.language_code }}
          path: cypress/reports/html/index.html  # Explicit path to the HTML file